name: verify

on:
  push
  # pull_request:  # PRでも検証したい場合はコメント解除

env:
  YUKICODER_TOKEN: ${{ secrets.YUKICODER_TOKEN }}
  DROPBOX_TOKEN:   ${{ secrets.DROPBOX_TOKEN }}
  GH_PAT:          ${{ secrets.GH_PAT }}
  GITHUB_TOKEN:    ${{ secrets.GITHUB_TOKEN }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      shards: ${{ steps.split.outputs.shards }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - id: list
        name: List C++ tests
        shell: bash
        run: |
          set -eux
          mkdir -p .verify-helper
          mapfile -t FILES < <(git ls-files 'test/*test.cpp' || true)
          printf '%s\n' "${FILES[@]}" > .verify-helper/targets.txt
          echo "count=${#FILES[@]}" >> "$GITHUB_OUTPUT"
          echo "Prepared .verify-helper/targets.txt:"
          sed -n '1,50p' .verify-helper/targets.txt || true

      - id: split
        name: Decide shards
        shell: bash
        run: |
          COUNT="${{ steps.list.outputs.count || 0 }}"
          MAX=8
          if [ -z "$COUNT" ] || [ "$COUNT" -lt 1 ]; then COUNT=1; fi
          SHARDS=$(( COUNT < MAX ? COUNT : MAX ))
          printf '[' > shards.json
          for i in $(seq 0 $((SHARDS-1))); do
            printf '"%s"' "$i"
            if [ "$i" -lt $((SHARDS-1)) ]; then printf ','; fi
          done >> shards.json
          printf ']\n' >> shards.json
          echo "shards=$(cat shards.json)" >> "$GITHUB_OUTPUT"
          echo "Using SHARDS=$(cat shards.json)"

      # ★ ファイル単体ではなく「ディレクトリごと」アップロード
      - name: Upload verify-helper dir
        uses: actions/upload-artifact@v4
        with:
          name: verify-helper
          path: .verify-helper

  verify-shard:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: ${{ fromJson(needs.prepare.outputs.shards) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ★ ワークスペース直下に展開 → .verify-helper/targets.txt がそのまま復元される
      - uses: actions/download-artifact@v4
        with:
          name: verify-helper
          path: .

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install oj-verify
        run: pip3 install -U online-judge-verify-helper

      - name: Cache judge data & verify cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/online-judge-tools/library-checker-problems/
            .verify-helper/cache/
          key: verify-${{ hashFiles('.verify-helper/targets.txt') }}-${{ runner.os }}

      - name: Run shard ${{ matrix.shard }}
        shell: bash
        env:
          SHARD: ${{ matrix.shard }}
        run: |
          set -eux
          # フォールバック: もし artifact 名のディレクトリに入ってしまっていたら拾い直す
          if [ ! -f .verify-helper/targets.txt ] && [ -f verify-helper/targets.txt ]; then
            mkdir -p .verify-helper
            mv verify-helper/targets.txt .verify-helper/targets.txt
          fi

          test -f .verify-helper/targets.txt
          echo "Targets present at .verify-helper/targets.txt"
          sed -n '1,10p' .verify-helper/targets.txt || true

          N_SHARDS=${{ strategy.job-total }}
          awk -v n="$N_SHARDS" -v s="$SHARD" 'NR % n == s' .verify-helper/targets.txt > shard.txt
          echo "Shard $SHARD of $N_SHARDS:"
          cat shard.txt || true

          if [ -s shard.txt ]; then
            # 各ファイルをCPUコア数まで並列に実行（どれか落ちたら非ゼロで終了）
            xargs -r -a shard.txt -P "$(nproc)" -I{} oj-verify run "{}"
          else
            echo "No tests in this shard."
          fi

  publish:
    needs: [prepare, verify-shard]
    if: ${{ github.event_name == 'push' && github.ref_name == github.event.repository.default_branch }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install oj-verify
        run: pip3 install -U online-judge-verify-helper

      - name: Cache judge data & verify cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/online-judge-tools/library-checker-problems/
            .verify-helper/cache/
          key: verify-${{ hashFiles('.verify-helper/targets.txt') }}-${{ runner.os }}

      - name: Git identity (for commits/push)
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Finalize & publish docs (gh-pages branch)
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          YUKICODER_TOKEN: ${{ secrets.YUKICODER_TOKEN }}
          DROPBOX_TOKEN:   ${{ secrets.DROPBOX_TOKEN }}
          GITHUB_TOKEN:    ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -eux
          oj-verify all
          oj-verify docs
